[{"/home/ahmed/Robusta-Challenge/src/index.js":"1","/home/ahmed/Robusta-Challenge/src/reportWebVitals.js":"2","/home/ahmed/Robusta-Challenge/src/App.js":"3","/home/ahmed/Robusta-Challenge/src/component/navbar.js":"4","/home/ahmed/Robusta-Challenge/src/pages/level1/movieInfo.js":"5","/home/ahmed/Robusta-Challenge/src/pages/level1/movielist.js":"6","/home/ahmed/Robusta-Challenge/src/pages/level2/movieinfo2.js":"7","/home/ahmed/Robusta-Challenge/src/pages/level2/movielist2.js":"8","/home/ahmed/Robusta-Challenge/src/pages/level2/editmovie.js":"9"},{"size":535,"mtime":1652109448461,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1652109448461,"results":"12","hashOfConfig":"11"},{"size":1198,"mtime":1652199925693,"results":"13","hashOfConfig":"11"},{"size":921,"mtime":1652169510818,"results":"14","hashOfConfig":"11"},{"size":4079,"mtime":1652200214326,"results":"15","hashOfConfig":"11"},{"size":1552,"mtime":1652184939124,"results":"16","hashOfConfig":"11"},{"size":6115,"mtime":1652201855639,"results":"17","hashOfConfig":"11"},{"size":2367,"mtime":1652201815866,"results":"18","hashOfConfig":"11"},{"size":4954,"mtime":1652202053964,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1ppfr08",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"49"},"/home/ahmed/Robusta-Challenge/src/index.js",[],[],[],"/home/ahmed/Robusta-Challenge/src/reportWebVitals.js",[],[],"/home/ahmed/Robusta-Challenge/src/App.js",[],[],"/home/ahmed/Robusta-Challenge/src/component/navbar.js",[],[],"/home/ahmed/Robusta-Challenge/src/pages/level1/movieInfo.js",["50"],[],"/home/ahmed/Robusta-Challenge/src/pages/level1/movielist.js",["51"],[],"/home/ahmed/Robusta-Challenge/src/pages/level2/movieinfo2.js",["52"],[],"/home/ahmed/Robusta-Challenge/src/pages/level2/movielist2.js",[],[],[],"/home/ahmed/Robusta-Challenge/src/pages/level2/editmovie.js",["53","54","55"],[],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport '../../css/style.css'\nimport axios from \"axios\";\nimport {useParams} from \"react-router-dom\";\n\n\nconst Editmovie = (props) => {\n\n    const params  = useParams()\n\n    function years() {\n\n        let year_satart = 1940;\n        let year_end = (new Date).getFullYear(); // current year\n        let year_selected = 1992;\n\n        let option = '';\n        option = '<option>Year</option>'; // first option\n\n        for (let i = year_satart; i <= year_end; i++) {\n            let selected = (i === year_selected ? ' selected' : '');\n            option += '<option  value=\"' + i + '\"' + selected + '>' + i + '</option>';\n        }\n\n        document.getElementById(\"year\").innerHTML = option;\n\n    }\n\n\n    const [cats, setCat] = useState([]);\n\n\n\tconst [filmInfo, setInfo] = useState({})\n\n    const getCategory = async () => {\n        try {\n            const response = await axios.get('/categories')\n            const { data } = response\n            console.log(data)\n            setCat(data)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n\n    useEffect(() => {\n        getCategory()\n        years()\n        axios.get(`/movies/${params.id}`).then((res)=> {\n\t\t\tconsole.log(res)\n\t\t\tsetInfo(res.data)\n\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err)\n\t\t})\n\t}, [])\n\n\n\n\n    const [addFormData, setAddFormData] = useState({\n        moviename: \"\",\n        moviebudjet: \"\",\n        category: [],\n    });\n\n    const handleAddFormChange = (event) => {\n        event.preventDefault();\n\n        const name = event.target.getAttribute(\"name\");\n        const value = event.target.value;\n\n        const newFormData = { ...addFormData };\n        newFormData[name] = value;\n\n        setAddFormData(newFormData);\n    };\n\n\n\n\n    let saveIntoApi = async (event , id) => {\n        event.preventDefault();\n        let movieyear = document.getElementById('year').value;\n\n        var select = document.getElementById('category');\n        var selected = [...select.selectedOptions].map(option => parseInt(option.value));\n        console.log(selected, \"skjfvibfiojoijvdopkvopdkjvbopkofkbopfj\");\n\n\n      \n\n            try {\n                axios.put(`/movies/${params.id}`, {\n                    \"title\": addFormData.moviename,\n                    \"year\": parseInt(movieyear),\n                    \"budget\": parseInt(addFormData.moviebudjet),\n                    \"category_ids\": selected\n                }).then((response) => {\n                    console.log(response.data)\n                })\n\n            } catch (error) {\n                console.log(error)\n            }\n   \n\n\n\n\n    }\n\n\n\n\n\n    return (\n        <>\n\n            <div className=\"container\" style={{ marginTop: \"50px\" }} >\n\n\n                <form onSubmit={saveIntoApi}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"moviename\">Movie Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"moviename\" name=\"moviename\"  onChange={handleAddFormChange} />\n                    </div>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <label className=\"input-group-text\" htmlFor=\"year\">Movie Year: </label>\n                        </div>\n                        <select className=\"custom-select\" id=\"year\" name=\"year\"  onChange={handleAddFormChange}   >\n                        </select>\n                    </div>\n\n\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"moviename\">Movie Budget</label>\n                        <input type=\"text\" className=\"form-control\" id=\"moviebudjet\" name=\"moviebudjet\" onChange={handleAddFormChange} />\n                    </div>\n\n                    <div style={{ marginTop: \"5px\" }}>\n                        <select style={{ width: \"350px\" }} size=\"8\" multiple id=\"category\" name=\"category\" onChange={handleAddFormChange} >\n                            {\n\n                                cats.map((cat, index) => {\n                                    return (\n                                        <>\n                                            <option key={index} value={cat.id}>{cat.title}</option>\n\n                                        </>\n                                    );\n                                })\n\n\n                            }\n                        </select>\n\n                    </div>\n\n                    <div>\n\n                        <button type=\"submit\" className=\"btn btn-primary\" style={{ marginTop: \"5px\", marginRight: \"5px\" }} >Submit</button>\n                        <Link className=\"btn btn-primary\" style={{ marginTop: \"5px\" }} to=\"/movielist2\">movielist</Link>\n\n                    </div>\n\n                </form>\n\n            </div>\n\n        </>\n    );\n\n\n\n}\n\nexport default Editmovie;",{"ruleId":"56","severity":1,"message":"57","line":17,"column":25,"nodeType":"58","messageId":"59","endLine":17,"endColumn":33,"fix":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":15,"column":25,"nodeType":"58","messageId":"59","endLine":15,"endColumn":33,"fix":"65"},{"ruleId":"56","severity":1,"message":"57","line":16,"column":25,"nodeType":"58","messageId":"59","endLine":16,"endColumn":33,"fix":"66"},{"ruleId":"61","severity":1,"message":"67","line":35,"column":9,"nodeType":"63","messageId":"64","endLine":35,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":60,"column":5,"nodeType":"70","endLine":60,"endColumn":7,"suggestions":"71"},"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"72","text":"73"},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar",{"range":"74","text":"73"},{"range":"75","text":"73"},"'filmInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["76"],[451,451],"()",[309,309],[388,388],{"desc":"77","fix":"78"},"Update the dependencies array to be: [params.id]",{"range":"79","text":"80"},[1407,1409],"[params.id]"]